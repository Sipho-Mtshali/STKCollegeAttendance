// PDF Export Functions
async function exportToPDF() {
    const exportBtn = document.querySelector('.export-btn');
    exportBtn.classList.add('loading');
    exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
    
    try {
        // Fetch all attendance data
        const attendanceSnapshot = await db.collection('attendance')
            .where('status', '==', 'approved')
            .orderBy('date', 'desc')
            .get();
        
        if (attendanceSnapshot.empty) {
            showNotification('No approved attendance records to export', 'info');
            return;
        }
        
        // Prepare data for PDF
        const attendanceData = [];
        attendanceSnapshot.forEach((doc) => {
            const data = doc.data();
            attendanceData.push({
                studentName: data.studentName,
                studentId: data.studentIdNumber || 'N/A',
                date: data.date,
                time: data.timestamp ? formatTime(data.timestamp.toDate()) : 'N/A',
                status: 'Present'
            });
        });
        
        // Generate PDF
        generateAttendancePDF(attendanceData);
        
    } catch (error) {
        console.error('Error exporting to PDF:', error);
        showNotification('Failed to export PDF', 'error');
    } finally {
        // Reset button
        exportBtn.classList.remove('loading');
        exportBtn.innerHTML = '<i class="fas fa-file-pdf"></i> Export PDF';
    }
}

function generateAttendancePDF(attendanceData) {
    // Create new jsPDF instance
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set font
    doc.setFont('helvetica');
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(255, 138, 0); // Orange color
    doc.text('EduTrack Attendance Report', 20, 25);
    
    // Add subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${formatDate(new Date())} at ${formatTime(new Date())}`, 20, 35);
    
    // Add summary statistics
    const totalRecords = attendanceData.length;
    const uniqueStudents = [...new Set(attendanceData.map(record => record.studentId))].length;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Summary:', 20, 50);
    
    doc.setFontSize(11);
    doc.text(`Total Attendance Records: ${totalRecords}`, 25, 60);
    doc.text(`Unique Students: ${uniqueStudents}`, 25, 70);
    
    // Prepare table data
    const tableData = attendanceData.map(record => [
        record.studentName,
        record.studentId,
        formatDate(new Date(record.date)),
        record.time,
        record.status
    ]);
    
    // Add table
    doc.autoTable({
        startY: 85,
        head: [['Student Name', 'Student ID', 'Date', 'Time', 'Status']],
        body: tableData,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [255, 138, 0], // Orange header
            textColor: [255, 255, 255],
            fontStyle: 'bold'
        },
        alternateRowStyles: {
            fillColor: [255, 248, 242] // Light orange
        },
        columnStyles: {
            0: { cellWidth: 45 }, // Student Name
            1: { cellWidth: 30 }, // Student ID
            2: { cellWidth: 35 }, // Date
            3: { cellWidth: 25 }, // Time
            4: { cellWidth: 25 }  // Status
        }
    });
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        // Page number
        doc.setFontSize(10);
        doc.setTextColor(128, 128, 128);
        doc.text(`Page ${i} of ${pageCount}`, 
                 doc.internal.pageSize.width - 30, 
                 doc.internal.pageSize.height - 10);
        
        // Footer text
        doc.text('Generated by EduTrack Attendance System', 
                 20, 
                 doc.internal.pageSize.height - 10);
    }
    
    // Save the PDF
    const fileName = `attendance_report_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    showNotification('PDF exported successfully!', 'success');
}

// Export attendance by date range
async function exportDateRangePDF(startDate, endDate) {
    try {
        const attendanceSnapshot = await db.collection('attendance')
            .where('status', '==', 'approved')
            .where('date', '>=', startDate)
            .where('date', '<=', endDate)
            .orderBy('date', 'desc')
            .get();
        
        if (attendanceSnapshot.empty) {
            showNotification('No attendance records found in selected date range', 'info');
            return;
        }
        
        const attendanceData = [];
        attendanceSnapshot.forEach((doc) => {
            const data = doc.data();
            attendanceData.push({
                studentName: data.studentName,
                studentId: data.studentIdNumber || 'N/A',
                date: data.date,
                time: data.timestamp ? formatTime(data.timestamp.toDate()) : 'N/A',
                status: 'Present'
            });
        });
        
        generateDateRangePDF(attendanceData, startDate, endDate);
        
    } catch (error) {
        console.error('Error exporting date range PDF:', error);
        showNotification('Failed to export PDF', 'error');
    }
}

function generateDateRangePDF(attendanceData, startDate, endDate) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set font
    doc.setFont('helvetica');
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(255, 138, 0);
    doc.text('EduTrack Attendance Report', 20, 25);
    
    // Add date range subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Date Range: ${formatDate(new Date(startDate))} - ${formatDate(new Date(endDate))}`, 20, 35);
    doc.text(`Generated on: ${formatDate(new Date())} at ${formatTime(new Date())}`, 20, 45);
    
    // Add summary statistics
    const totalRecords = attendanceData.length;
    const uniqueStudents = [...new Set(attendanceData.map(record => record.studentId))].length;
    const dateRange = attendanceData.length > 0 ? 
        Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24)) + 1 : 0;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Summary:', 20, 60);
    
    doc.setFontSize(11);
    doc.text(`Total Attendance Records: ${totalRecords}`, 25, 70);
    doc.text(`Unique Students: ${uniqueStudents}`, 25, 80);
    doc.text(`Days in Range: ${dateRange}`, 25, 90);
    
    if (uniqueStudents > 0) {
        const averageAttendance = (totalRecords / (uniqueStudents * dateRange) * 100).toFixed(1);
        doc.text(`Average Attendance Rate: ${averageAttendance}%`, 25, 100);
    }
    
    // Prepare table data
    const tableData = attendanceData.map(record => [
        record.studentName,
        record.studentId,
        formatDate(new Date(record.date)),
        record.time,
        record.status
    ]);
    
    // Add table
    doc.autoTable({
        startY: 115,
        head: [['Student Name', 'Student ID', 'Date', 'Time', 'Status']],
        body: tableData,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [255, 138, 0],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
        },
        alternateRowStyles: {
            fillColor: [255, 248, 242]
        },
        columnStyles: {
            0: { cellWidth: 45 },
            1: { cellWidth: 30 },
            2: { cellWidth: 35 },
            3: { cellWidth: 25 },
            4: { cellWidth: 25 }
        }
    });
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        doc.setFontSize(10);
        doc.setTextColor(128, 128, 128);
        doc.text(`Page ${i} of ${pageCount}`, 
                 doc.internal.pageSize.width - 30, 
                 doc.internal.pageSize.height - 10);
        
        doc.text('Generated by EduTrack Attendance System', 
                 20, 
                 doc.internal.pageSize.height - 10);
    }
    
    // Save the PDF
    const fileName = `attendance_report_${startDate}_to_${endDate}.pdf`;
    doc.save(fileName);
    
    showNotification('Date range PDF exported successfully!', 'success');
}

// Export student-wise attendance summary
async function exportStudentSummaryPDF() {
    try {
        // Get all students
        const studentsSnapshot = await db.collection('students')
            .where('teacherId', '==', currentUser.uid)
            .get();
        
        if (studentsSnapshot.empty) {
            showNotification('No students found', 'info');
            return;
        }
        
        // Get attendance data for all students
        const attendanceSnapshot = await db.collection('attendance')
            .where('status', '==', 'approved')
            .get();
        
        // Process data
        const studentSummary = {};
        studentsSnapshot.forEach(doc => {
            const student = doc.data();
            studentSummary[doc.id] = {
                name: student.name,
                studentId: student.studentId,
                totalDays: 0,
                presentDays: 0,
                percentage: 0
            };
        });
        
        // Count attendance
        attendanceSnapshot.forEach(doc => {
            const attendance = doc.data();
            if (studentSummary[attendance.studentId]) {
                studentSummary[attendance.studentId].presentDays++;
            }
        });
        
        // Calculate total days (assuming all students have same total days)
        const totalDays = attendanceSnapshot.size > 0 ? 
            Math.max(...Object.values(studentSummary).map(s => s.presentDays)) : 0;
        
        // Calculate percentages
        Object.values(studentSummary).forEach(student => {
            student.totalDays = totalDays;
            student.percentage = totalDays > 0 ? 
                ((student.presentDays / totalDays) * 100).toFixed(1) : 0;
        });
        
        generateStudentSummaryPDF(Object.values(studentSummary));
        
    } catch (error) {
        console.error('Error exporting student summary PDF:', error);
        showNotification('Failed to export student summary PDF', 'error');
    }
}

function generateStudentSummaryPDF(studentData) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set font
    doc.setFont('helvetica');
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(255, 138, 0);
    doc.text('Student Attendance Summary', 20, 25);
    
    // Add subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${formatDate(new Date())} at ${formatTime(new Date())}`, 20, 35);
    
    // Add summary statistics
    const totalStudents = studentData.length;
    const averageAttendance = studentData.length > 0 ? 
        (studentData.reduce((sum, student) => sum + parseFloat(student.percentage), 0) / totalStudents).toFixed(1) : 0;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Summary:', 20, 50);
    
    doc.setFontSize(11);
    doc.text(`Total Students: ${totalStudents}`, 25, 60);
    doc.text(`Class Average Attendance: ${averageAttendance}%`, 25, 70);
    
    // Prepare table data
    const tableData = studentData.map(student => [
        student.name,
        student.studentId,
        student.presentDays.toString(),
        student.totalDays.toString(),
        `${student.percentage}%`
    ]);
    
    // Add table
    doc.autoTable({
        startY: 85,
        head: [['Student Name', 'Student ID', 'Present Days', 'Total Days', 'Attendance %']],
        body: tableData,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [255, 138, 0],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
        },
        alternateRowStyles: {
            fillColor: [255, 248, 242]
        },
        columnStyles: {
            0: { cellWidth: 50 },
            1: { cellWidth: 35 },
            2: { cellWidth: 30 },
            3: { cellWidth: 30 },
            4: { cellWidth: 30, halign: 'center' }
        },
        didParseCell: function(data) {
            // Color code attendance percentages
            if (data.column.index === 4 && data.section === 'body') {
                const percentage = parseFloat(data.cell.text[0]);
                if (percentage >= 75) {
                    data.cell.styles.textColor = [40, 167, 69]; // Green
                } else if (percentage >= 50) {
                    data.cell.styles.textColor = [255, 193, 7]; // Yellow
                } else {
                    data.cell.styles.textColor = [220, 53, 69]; // Red
                }
                data.cell.styles.fontStyle = 'bold';
            }
        }
    });
    
    // Add legend
    const finalY = doc.lastAutoTable.finalY + 20;
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text('Attendance Legend:', 20, finalY);
    
    doc.setFontSize(10);
    doc.setTextColor(40, 167, 69);
    doc.text('• 75% and above - Excellent', 25, finalY + 10);
    
    doc.setTextColor(255, 193, 7);
    doc.text('• 50% - 74% - Good', 25, finalY + 20);
    
    doc.setTextColor(220, 53, 69);
    doc.text('• Below 50% - Needs Improvement', 25, finalY + 30);
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        doc.setFontSize(10);
        doc.setTextColor(128, 128, 128);
        doc.text(`Page ${i} of ${pageCount}`, 
                 doc.internal.pageSize.width - 30, 
                 doc.internal.pageSize.height - 10);
        
        doc.text('Generated by EduTrack Attendance System', 
                 20, 
                 doc.internal.pageSize.height - 10);
    }
    
    // Save the PDF
    const fileName = `student_attendance_summary_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    showNotification('Student summary PDF exported successfully!', 'success');
}

// Export daily attendance sheet (for a specific date)
async function exportDailyAttendancePDF(date) {
    try {
        const attendanceSnapshot = await db.collection('attendance')
            .where('date', '==', date)
            .where('status', '==', 'approved')
            .get();
        
        // Get all students to show who was absent
        const studentsSnapshot = await db.collection('students')
            .where('teacherId', '==', currentUser.uid)
            .get();
        
        const allStudents = {};
        studentsSnapshot.forEach(doc => {
            const student = doc.data();
            allStudents[doc.id] = {
                name: student.name,
                studentId: student.studentId,
                status: 'Absent'
            };
        });
        
        // Mark present students
        attendanceSnapshot.forEach(doc => {
            const attendance = doc.data();
            if (allStudents[attendance.studentId]) {
                allStudents[attendance.studentId].status = 'Present';
                allStudents[attendance.studentId].time = attendance.timestamp ? 
                    formatTime(attendance.timestamp.toDate()) : 'N/A';
            }
        });
        
        generateDailyAttendancePDF(Object.values(allStudents), date);
        
    } catch (error) {
        console.error('Error exporting daily attendance PDF:', error);
        showNotification('Failed to export daily attendance PDF', 'error');
    }
}

function generateDailyAttendancePDF(studentData, date) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set font
    doc.setFont('helvetica');
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(255, 138, 0);
    doc.text('Daily Attendance Sheet', 20, 25);
    
    // Add date
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`Date: ${formatDate(new Date(date))}`, 20, 35);
    
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${formatDate(new Date())} at ${formatTime(new Date())}`, 20, 45);
    
    // Add summary
    const presentCount = studentData.filter(s => s.status === 'Present').length;
    const absentCount = studentData.filter(s => s.status === 'Absent').length;
    const totalStudents = studentData.length;
    const attendanceRate = totalStudents > 0 ? ((presentCount / totalStudents) * 100).toFixed(1) : 0;
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Summary:', 20, 60);
    
    doc.setFontSize(11);
    doc.text(`Total Students: ${totalStudents}`, 25, 70);
    doc.text(`Present: ${presentCount}`, 25, 80);
    doc.text(`Absent: ${absentCount}`, 25, 90);
    doc.text(`Attendance Rate: ${attendanceRate}%`, 25, 100);
    
    // Prepare table data
    const tableData = studentData.map(student => [
        student.name,
        student.studentId,
        student.status,
        student.status === 'Present' ? (student.time || 'N/A') : '-'
    ]);
    
    // Sort by name
    tableData.sort((a, b) => a[0].localeCompare(b[0]));
    
    // Add table
    doc.autoTable({
        startY: 115,
        head: [['Student Name', 'Student ID', 'Status', 'Time Marked']],
        body: tableData,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [255, 138, 0],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
        },
        alternateRowStyles: {
            fillColor: [255, 248, 242]
        },
        columnStyles: {
            0: { cellWidth: 60 },
            1: { cellWidth: 40 },
            2: { cellWidth: 30, halign: 'center' },
            3: { cellWidth: 35, halign: 'center' }
        },
        didParseCell: function(data) {
            // Color code status
            if (data.column.index === 2 && data.section === 'body') {
                if (data.cell.text[0] === 'Present') {
                    data.cell.styles.textColor = [40, 167, 69];
                    data.cell.styles.fontStyle = 'bold';
                } else {
                    data.cell.styles.textColor = [220, 53, 69];
                    data.cell.styles.fontStyle = 'bold';
                }
            }
        }
    });
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        
        doc.setFontSize(10);
        doc.setTextColor(128, 128, 128);
        doc.text(`Page ${i} of ${pageCount}`, 
                 doc.internal.pageSize.width - 30, 
                 doc.internal.pageSize.height - 10);
        
        doc.text('Generated by EduTrack Attendance System', 
                 20, 
                 doc.internal.pageSize.height - 10);
    }
    
    // Save the PDF
    const fileName = `daily_attendance_${date}.pdf`;
    doc.save(fileName);
    
    showNotification('Daily attendance PDF exported successfully!', 'success');
}